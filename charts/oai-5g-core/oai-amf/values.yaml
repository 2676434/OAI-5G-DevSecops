# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1  # can't be changed 

imageOS: ubuntu  # only ubi (Openshift) and ubuntu (Ubuntu based worker nodes in Kubernetes) 

# this variable takes care of adding dependency between this nf and other nfs, so that the core network can be deployed properly
handleDependencies: true

nfimage:  # image name either locally present or in a public/private repository
  ubuntu:
    repository: docker.io/oaisoftwarealliance/oai-amf           ## The image will be pulled from dockerhub
    tag: develop                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  ubi:
    repository: oai-amf           ## The image will be pulled from dockerhub
    tag: develop                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent

tcpdumpimage:
  ubuntu:
    repository: docker.io/corfr/tcpdump
    tag: latest
    #pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  ubi:
    repository: network-tools-rhel8
    tag: latest
    #pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent

## good to use when pulling images from docker-hub, the same pull secrets will be used to pull both the images, if you have multiple secrets mention all of them. 
# imagePullSecrets: 
#   - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "oai-amf-sa"

## OPENSHIFT terminology
podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

## OPENSHIFT terminology
securityContext:
  nf:
    privileged: false
  tcpdump:
    privileged: true    #Always be true for capturing on a interface

servicehttp:
  type: ClusterIP
  http1Port: 80
  http2Port: 9090

servicesctp:
  type: ClusterIP #LoadBalancer
  sctpPort: 38412

# If you will turn turn this to false TCPdump container will not run
keepTcpContainer: false

# Turning it to false will make the nf and tcpdump container to go in sleep mode and you can run any command for debugging
start:
  nf: true
  tcpdump: false # WARNING: start tcpdump collection to analyse but beware it will take a lot of space in the container/persistent volume  

# AMF needs two seperate interface one for http and other one for SCTP (N1/N2) to communicate with gNB. 
# But for experimentation only one interface can be used. 
# When you need multus:
# 1. you want seperate interface for N1/N2 and Namf 
# 2. Your gnB is outside the cluster and the host machine can communicate but pods can not then you can provide ip-address in the same range as your host machine
# 3. You want static ip-address for N1/N2 interface, Namf can be discovered by its service name

multus:
  create: false
  n1IPadd: "172.21.10.6"
  n1Netmask: "22"
  n1Gateway: "172.21.11.254"
  hostInterface: "bond0"      # Interface of the host machine on which this pod will be scheduled

config:
  instance: "0"
  pidDirectory: "/var/run"
  mcc: "208"
  mnc: "99"
  regionId: "128"
  amfsetId: "1"
  servedGuamiMcc0: "208"
  servedGuamiMnc0: "99"
  servedGuamiRegionId0: "128"
  servedGuamiAmfSetId0: "1"
  servedGuamiMcc1: "460"
  servedGuamiMnc1: "11"
  servedGuamiRegionId1: "10"
  servedGuamiAmfSetId1: "1"
  plmnSupportMcc: "208"
  plmnSupportMnc: "99"
  plmnSupportTac: "0x0001"
  sst0: "1"
  sd0: "1"
  sst1: "111"
  sd1: "124"
  amfInterfaceNameForNGAP: "eth0" # If multus creation is true then net1 else eth0
  amfInterfaceNameForN11: "eth0"  # Service based interface
  useFqdnDns: "yes"  # If yes then only network functions FQDN name will be used instead of their ip-address
  smfInstanceId0: "1"  # Only configure if not using NRF
  smfIpv4Addr0: "0.0.0.0" # Only configure if not using NRF       
  smfHttpVersion0: "v1" # Only configure if not using NRF
  smfFqdn0: "oai-smf-svc" # Only configure if not using NRF
  smfInstanceId1: "2"  # Currently disabled in the amf.conf no need to configure
  smfIpv4Addr1: "0.0.0.0" # Currently disabled in the amf.conf no need to configure
  smfHttpVersion1: "v1" # Currently disabled in the amf.conf no need to configure
  smfFqdn1: "localhost" # Currently disabled in the amf.conf no need to configure
  nrfIpv4Addr: "0.0.0.0" 
  nrfPort: 80
  nrfApiVersion: "v1"
  nrfFqdn: "oai-nrf-svc"  # amf communicates using FQDN
  ausfFqdn: "oai-ausf-svc"
  ausfIpv4Addr: "127.0.0.1" # configure only if there is an external AUSF else it will communicate with mysql directly
  ausfPort: 80
  ausfApiVersion: "v1"  
  nssfFqdn: "oai-nssf-svc"
  nssfIpv4Addr: "127.0.0.1" # configure only if there is an external AUSF else it will communicate with mysql directly
  nssfPort: 80
  nssfApiVersion: "v1"
  nfRegistration: "yes" 
  nrfSelection: "no"
  smfSelection: "yes" 
  externalAusf: "yes"
  externalUdm: "no"
  useHttp2: "no"
  intAlgoList: '[ "NIA0" , "NIA1" , "NIA2" ]'
  ciphAlgoList: '[ "NEA0" , "NEA1" , "NEA2" ]'
  operatorKey: "c42449363bbad02b66d16bc975d77cc1"  # should be same as in susbcriber database
  mySqlServer: "mysql" # OPTIONAL: used only if not using AUSF
  mySqlUser: "root" # OPTIONAL: used only if not using AUSF
  mySqlPass: "linux" # OPTIONAL: used only if not using AUSF
  mySqlDb: "oai_db" # OPTIONAL: used only if not using AUSF

# Currently this presistent volume is only used for storing the tcpdump of network functions at one common place. 
persistent:
  sharedvolume: false
  volumeName: cn5g-pv

resources:
  define: false
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
   cpu: 100m
   memory: 256Mi

readinessProbe: true

livenessProbe: true

terminationGracePeriodSeconds: 30

nodeSelector: {}

nodeName: 
