kubernetesType: Vanilla  #Vanilla for community kubernetes distribution else Openshift for Openshift

## In case of using these charts on Openshift then please use UBI images
## To know more about them follow this tutorial https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed/-/tree/master/openshift
nfimage:   # image name either locally present or in a public/private repository
  repository:  @GNB_REPO@
  version:  @GNB_TAG@ # image tag or develop
  # pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

# good to use when pulling images from docker-hub mention 
imagePullSecrets:
 - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "oai-gnb-sa"

#service type is fixed to clusterIP, it is only support for non multus interface (eth0)

# These helm-charts can be used for two purpose
# 1. RFSimulated oai-gNB: Only requires 1 interface for N2 and N3. You can use Kubernetes default interface eth0
# 2. Physical gNB with Ethernet based USRP or RRU: You need to use ruInterface to connect with RU. Make sure that the ip-address you choose can reach to RU. 
#                                                 Using a dedicated interface for N2 or N3 is optional you can still use eth0. 
# 3. Another thing you can chose to use same virtual interface for N2/N3 its optional to have two different

## NOTE: To use these charts with USRP B210 you need to modify and mount usb from the host. 
## Change these ip-addresses according to your environment


multus:
  # if default gatway is empty then it will be removed
  defaultGateway: "@DEFAULT_GW_GNB@"
  n2Interface:
    create: @MULTUS_GNB_N2@
    # #name inside the pod is hardcoded right now
    # name: "n2"
    IPadd: "@IP_GNB_N2@"
    Netmask: "@NETMASK_GNB_N2@"
    # if Mac is empty then it will be removed
    Mac: "@MAC_GNB_N2@"
    # if gateway is empty then it will be removed
    Gateway: "@GW_GNB_N2@"
    routes: @ROUTES_GNB_N2@ # [{'dst': '10.8.0.0/24','gw': '172.21.7.254'}, {'dst': '10.9.0.0/24','gw': '172.21.7.254'}]
    hostInterface: "@IF_NAME_GNB_N2@" # Interface of the host machine on which this pod will be scheduled
  n3Interface:
    create: @MULTUS_GNB_N3@
    # #name inside the pod is hardcoded right now
    # name: "n3"
    IPadd: "@IP_GNB_N3@"
    Netmask: "@NETMASK_GNB_N3@"
    # if mac is empty then it will be removed
    Mac: "@MAC_GNB_N3@"
    # if gateway is empty then it will be removed
    Gateway:  "@GW_GNB_N3@"
    routes: @ROUTES_GNB_N3@
    hostInterface: "@IF_NAME_GNB_N3@" # Interface of the host machine on which this pod will be scheduled
  ru1Interface:
    create: @MULTUS_GNB_RU1@
    IPadd: "@IP_GNB_RU1@"
    # #name inside the pod is hardcoded right now
    # name: "ru1"
    Netmask: "@NETMASK_GNB_RU1@"
    # if mac is empty then it will be removed
    Mac: "@MAC_GNB_RU1@"
    # if gateway is commented then it will be removed
    Gateway: "@GW_GNB_RU1@"  #In case you don't have a gateway remove it from here
    mtu: @MTU_GNB_RU1@ 
    hostInterface: "@IF_NAME_GNB_RU1@"
  # ru2 can be useful for USRP N3XX when the 2 SFP NICs use 2 different PHY links to the server that hosts oai-gnb
  ru2Interface:
    create: @MULTUS_GNB_RU2@
    IPadd: "@IP_GNB_RU2@"
    # #name inside the pod is hardcoded right now
    # name: "ru2"
    Netmask: "@NETMASK_GNB_RU2@"
    # if mac is empty then it will be removed
    Mac: "@MAC_GNB_RU2@"
    # if gateway is commented then it will be removed
    Gateway: "@GW_GNB_RU2@"  #In case you don't have a gateway remove it from here
    mtu: @MTU_GNB_RU2@ 
    hostInterface: "@IF_NAME_GNB_RU2@"

## If you want to change more configuration parameters then you should mount the config file  
# in templates/configmap.yaml
# Example config files --> https://gitlab.eurecom.fr/oai/openairinterface5g/-/tree/develop/targets/PROJECTS/GENERIC-NR-5GC/CONF 
config:
  timeZone: "Europe/Paris"
  useAdditionalOptions: "@ADD_OPTIONS_GNB@"
  gnbName: "@GNB_NAME@"
  mcc: "@MCC@" # check the information with AMF, SMF, UPF
  mnc: "@MNC@" # check the information with AMF, SMF, UPF
  tac: "@TAC@" # check the information with AMF
  sst: "1"  #currently only 4 standard values are allowed 1,2,3,4
  usrp: "@RRU_TYPE@"   #allowed values rfsim, b2xx, n3xx or x3xx
  amfIpAddress: "@AMF_IP_ADDRESS@" # amf ip-address or service-name oai-amf-svc

## Debugging section
start:
  gnb: true #If false the network function container will run in sleep mode for manually testing
  tcpdump: @START_TCPDUMP@

includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #If true it will add a tcpdump container inside network function pod for debugging

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

## For openshift you can use rhel8/support-tools:8.7-13
tcpdumpimage:
   repository: docker.io/corfr/tcpdump
   version: latest
   #pullPolicy: IfNotPresent or Never or Always
   pullPolicy: IfNotPresent

persistent:
  sharedvolume: @SHAREDVOLUME@
  volumeName: oai5g-volume
  size: 1Gi

## NF is the network function and tcpdump is the tcpdump container. 
## To know more about request and limit it is better to understand that how Kubernetes QoS works. 
## https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
## https://kubernetes.io/docs/concepts/workloads/pods/pod-qos
resources:
  define: @QOS_GNB_DEF@
  limits:
    nf:
      cpu: 2000m
      memory: 2Gi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 200m
      memory: 128Mi
  requests:
    nf:
      cpu: 2000m
      memory: 2Gi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi

tolerations: []
affinity: {}

terminationGracePeriodSeconds: 5

nodeSelector: {}

nodeName: @NODE_GNB@
