kubernetesDistribution: Vanilla  #Vanilla for community kubernetes distribution else Openshift for Openshift

## In case of using these charts on Openshift then please use UBI images
## To know more about them follow this tutorial https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed/-/tree/master/openshift
nfimage:  # image name either locally present or in a public/private repository
  repository: @DU_REPO@ # docker.io/oaisoftwarealliance/oai-gnb
  version: @DU_TAG@ # image tag or develop
  # pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

## good to use when pulling images from docker-hub mention
imagePullSecrets:
  - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "@NAME_DU_SA@" # "oai-du-sa"


# oai-du helm-charts can be used in RFSimulated mode which does not require multiple interaces. 
# In case you use the charts with a RU/USRP you need a dedicated interface with the RU. 
## Change these ip-addresses according to your environment

multus:
  # if default gateway is left blank then it will be removed
  defaultGateway: ""
  f1Interface:
    create: @MULTUS_DU_F1@ # false
    ipAdd: "@IP_DU_F1@" # "172.21.16.100"
    netmask: "@NETMASK_DU_F1@" # "22"
    # if mac is empty then it will be removed
    mac: "@MAC_DU_F1@"    
    name: "f1"
    # if gateway is empty then it will be removed
    gateway: "@GW_DU_F1@" # "172.21.7.254"
    routes: @ROUTES_DU_F1@ # [{'dst': '10.8.0.0/24','gw': '172.21.7.254'}, {'dst': '10.9.0.0/24','gw': '172.21.7.254'}]
    hostInterface: "@IF_NAME_DU_F1@"     # Interface of the host machine on which this pod will be scheduled
  ru1Interface:
    create: @MULTUS_GNB_RU1@
    ipAdd: "@IP_GNB_RU1@"
    name: "ru1"
    netmask: "@NETMASK_GNB_RU1@"
    # if mac is empty then it will be removed
    mac: "@MAC_GNB_RU1@"
    # if gateway is commented then it will be removed
    gateway: "@GW_GNB_RU1@"  #In case you don't have a gateway remove it from here
    mtu: @MTU_GNB_RU1@ 
    hostInterface: "@IF_NAME_GNB_RU1@"
  # ru2 can be useful for USRP N3XX when the 2 SFP NICs use 2 different PHY links to the server that hosts oai-gnb
  ru2Interface:
    create: @MULTUS_GNB_RU2@
    ipAdd: "@IP_GNB_RU2@"
    name: "ru2"
    netmask: "@NETMASK_GNB_RU2@"
    # if mac is empty then it will be removed
    mac: "@MAC_GNB_RU2@"
    # if gateway is commented then it will be removed
    gateway: "@GW_GNB_RU2@"  #In case you don't have a gateway remove it from here
    mtu: @MTU_GNB_RU2@ 
    hostInterface: "@IF_NAME_GNB_RU2@"

## If you want to change more configuration parameters then you should mount the config file  
# in templates/configmap.yaml
# Example config files --> https://gitlab.eurecom.fr/oai/openairinterface5g/-/tree/develop/targets/PROJECTS/GENERIC-NR-5GC/CONF 
config:
  timeZone: "Europe/Paris"
  useAdditionalOptions: "@ADD_OPTIONS_GNB@" # same as for GNB
  duName: "@NAME_DU@"
  mcc: "@MCC@" # check the information with AMF, SMF, UPF
  mnc: "@MNC@" # check the information with AMF, SMF, UPF
  tac: "@TAC@" # check the information with AMF
  #sst: "1"  #currently only 4 standard values are allowed 1,2,3,4 # set via sed configmap
  usrp: "@RRU_TYPE@"   #allowed values rfsim, aw2s, b2xx, n3xx or x3xx
  f1IfName: "f1" # "eth0"   #if multus.f1Interface.create is true then use f1
  cuHost: "@CU_HOST_FROM_DU@" # "oai-cu" ## Ip-address or hostname
  f1cuPort: "@F1CUPORT@" # "2153"   #2153 if using same interface for f1 and n3 else standard port 2152 should be use if f1 and n3 interface are different
  f1duPort: "@F1DUPORT@" # "2153"   #2153 if using same interface for f1 and n3 else standard port 2152 should be use if f1 and n3 interface are different

## Debugging section
podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

securityContext:
  privileged: false

start:
  gnbdu: true #If false the network function container will run in sleep mode for manually testing
  tcpdump: @START_TCPDUMP@

includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #If true it will add a tcpdump container inside network function pod for debugging

tcpdumpimage:
  repository: docker.io/oaisoftwarealliance/oai-tcpdump-init
  version: alpine-3.20
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

persistent:
  sharedvolume: @SHAREDVOLUME@
  volumeName: oai5g-volume
  size: 1Gi

## NF is the network function and tcpdump is the tcpdump container. 
## To know more about request and limit it is better to understand that how Kubernetes QoS works. 
## https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
## https://kubernetes.io/docs/concepts/workloads/pods/pod-qos
resources:
  define: @QOS_DU_DEF@
  limits:
    nf:
      cpu: 2000m
      memory: 2Gi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 200m
      memory: 128Mi
  requests:
    nf:
      cpu: 2000m
      memory: 2Gi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi

tolerations: []

affinity: {}

terminationGracePeriodSeconds: 5

nodeSelector: {}

nodeName: @NODE_DU@

