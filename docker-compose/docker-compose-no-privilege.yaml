# In this docker-compose spgwu is not privileged access, it is good example for security purpose
version: '3.8'
services:
    mysql:
        container_name: "mysql"
        image: mysql:8.0
        volumes:
            - ./database/oai_db1.sql:/docker-entrypoint-initdb.d/oai_db.sql
            - ./healthscripts/mysql-healthcheck1.sh:/tmp/mysql-healthcheck.sh
        environment:
            - TZ=Europe/Paris
            - MYSQL_DATABASE=oai_db
            - MYSQL_USER=test
            - MYSQL_PASSWORD=test
            - MYSQL_ROOT_PASSWORD=linux
        healthcheck:
            test: /bin/bash -c "/tmp/mysql-healthcheck.sh"
            interval: 10s
            timeout: 5s
            retries: 30
        networks:
            public_net:
                ipv4_address: 192.168.70.131
    oai-amf:
        container_name: "oai-amf"
        image: oaisoftwarealliance/oai-amf:develop
        volumes:
            - ./conf/mini_nonrf_config.yaml:/openair-amf/etc/config.yaml
        environment:
            - TZ=Europe/Paris
        depends_on:
            - mysql
        networks:
            public_net:
                ipv4_address: 192.168.70.132
    oai-smf:
        container_name: "oai-smf"
        image: oaisoftwarealliance/oai-smf:develop
        volumes:
            - ./conf/mini_nonrf_config.yaml:/openair-smf/etc/config.yaml
        environment:
            - TZ=Europe/Paris
        depends_on:
            - oai-amf
        networks:
            public_net:
                ipv4_address: 192.168.70.133
        # TODO we need this for now until SMF does not resolve UPF upon start anymore
        extra_hosts:
            - "oai-spgwu:192.168.70.134"
    oai-spgwu:
        container_name: "oai-spgwu"
        image: oaisoftwarealliance/oai-spgwu-tiny:develop
        # TODO: oai-spgwu-tiny will not support the new common yaml config file feature
        #       waiting for the new oai-upf NF
        environment:
            - TZ=Europe/Paris
            - SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP=eth0
            - SGW_INTERFACE_NAME_FOR_SX=eth0
            - PGW_INTERFACE_NAME_FOR_SGI=eth0
            - NETWORK_UE_NAT_OPTION=yes
            - NETWORK_UE_IP=12.1.1.0/24
            - ENABLE_5G_FEATURES=yes
            - REGISTER_NRF=no
            - USE_FQDN_NRF=no
            - UPF_FQDN_5G=oai-spgwu
            - NRF_IPV4_ADDRESS=0.0.0.0
            - NRF_FQDN=localhost
            # Slice 0 (1, 0xFFFFFF)
            - NSSAI_SST_0=1
            - DNN_0=oai
            # Slice 1 (1, 1)
            - NSSAI_SST_1=1
            - NSSAI_SD_1=1
            - DNN_1=oai.ipv4
            # Slice 2 (222, 123)
            - NSSAI_SST_2=222
            - NSSAI_SD_2=123
            - DNN_2=default
        depends_on:
            - oai-smf
        cap_add:
            - NET_ADMIN
            - SYS_ADMIN
            - NET_RAW
        cap_drop:
            - ALL
        devices:
            - /dev/net/tun:/dev/net/tun
        sysctls:
            - net.ipv4.conf.eth0.rp_filter=0
            - net.ipv4.conf.all.forwarding=1
            - net.ipv4.conf.all.send_redirects=0
            - net.ipv4.conf.default.send_redirects=0
            - net.ipv4.conf.all.accept_redirects=0
            - net.ipv4.conf.default.accept_redirects=0
        networks:
            public_net:
                ipv4_address: 192.168.70.134
networks:
    # public_net:
    #     external:
    #         name: demo-oai-public-net
    public_net:
        driver: bridge
        name: demo-oai-public-net
        ipam:
            config:
                - subnet: 192.168.70.128/26
        driver_opts:
            com.docker.network.bridge.name: "demo-oai"
